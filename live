#!/usr/bin/env python

import os
import sys
import time
import asyncio
import curses
import binance
from random import choice as choice

from module.stdoutable import stdoutable
from module.streamprice import streamprice

def printable(stdscr):

	tprint = asyncio.ensure_future(task_printable(stdscr))	
	asyncio.ensure_future(task_quit(stdscr, tprint))	


async def task_printable(stdscr):

	global live_data, dead_time

	table = stdoutable(stdscr, live_data)
	stdscr.nodelay(True)
	while True:

		table.draw_table()
		await asyncio.sleep(0.01)


async def rnr(text = ''):

	global live_data
	frequence = 30
	raw = len(live_data) - 1
	while len(text) < 52: text += ' '
	_text = text

	await asyncio.sleep(1)

	dump = ''
	data = live_data[raw]
	while _text: # appear

		first_letter = _text[0]
		_text = _text[1:]
		dump += first_letter
		live_data[raw][0] = dump
		await asyncio.sleep(1 / frequence)
	while True: # dissappear

		interrupt = True
		dump = ' ' + dump[:-1]
		live_data[raw][0] = dump
		for mot in dump:
			if not mot == ' ': interrupt = False
		await asyncio.sleep(1 / frequence)
		if interrupt: break 

	
async def task_rolling(quiet = 100):

	global live_data

	version_info = sys.version_info
	py_ver = '{}.{}.{}'.format(version_info.major,
							   version_info.minor,
							   version_info.micro)
	bin_ver = '' #binance.__version__
	pub_list = ['https://kaloyansen.github.io',
				'press [q] to quit',
				'powered by python ' + py_ver,
				'powered by python-binance ' + bin_ver,
				'stdout by curses',
				'async by asyncio']
	live_data.append(['', '', ''])

	while True:
		
		pub = choice(pub_list)
		await asyncio.sleep(quiet)
		await rnr(pub)
        

async def task_quit(stdscr, task, interrupt_key = 'q'):

	# stdscr.nodelay(True)
	while True:

		key = stdscr.getch()
		if key == ord(interrupt_key):

			task.cancel()
			curses.endwin()
			break

		await asyncio.sleep(0.1)
	await asyncio.sleep(1)
	exit(0)
	


def read_coin_list(filename):

	with open(filename, 'r') as file:

		lines = file.readlines()
	clist = [line.strip() for line in lines]
	return clist


if __name__ == '__main__':

	dead_time = 0.1

	coin_list = read_coin_list('coin.list')
	live_data = [['crypto', 'price/usdt', 'change/%', 'capital/usdt']]
	for coin in coin_list:

		live_data.append([coin, '0', '', '0'])
	live_data.append(['0', '0', '', '0'])

	binance = streamprice(live_data, coin_list)
	binance.login(os.environ.get('BINANCE_KEY'),
				  os.environ.get('BINANCE_SECRET'))

	loop = asyncio.get_event_loop()

	try:

		minitask = asyncio.ensure_future(binance.task_miniticker_socket())
		rolltask = asyncio.ensure_future(task_rolling())
		usertask = asyncio.ensure_future(binance.task_account())

		curses.wrapper(printable)

		loop.run_forever()
	except KeyboardInterrupt:

		pass
	finally:

		print('closing')
		binance.close()
		#loop.close()
